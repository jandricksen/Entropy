 #pragma once

#include "Actor.h"
#include "InputHandler.h"
#include "GameObjectFactory.h"

class Projectile;

//Player class
class Player : public Actor
{
public:
	Player();
	virtual ~Player() {};

	// load from file
	virtual void load(std::unique_ptr<LoaderParams> const &pParams);

	// draw the object
	virtual void draw();

	// do update stuff
	virtual void update(double delta);

	// remove anything that needs to be deleted
	virtual void clean();

	// object has collided handle accordingly
	virtual void collision();

	// return object type
	virtual std::string type() { return "Player"; }

	// check if firing
	bool isFiring() { return m_bFiring; };
	void FireWeapon(std::vector<Projectile*>* projectileObjects);
	

private:

	// bring the player back if there are any lives left
	void ressurect();

	// handle any input from the keyboard, mouse or joystick
	void handleInput();

	// handle any animattion for the player
	void handleAnimation();

	// handle any movment not generated by input
	void handleMovement(Vector2D velocity);

	// player can be invulnerable for a time
	bool m_invulnerable;
	int m_invulnerableTime;
	int m_invulnerableCounter;

	int weaponCoolDown;
	int previousShotTime;
};

//Player creator class
class PlayerCreator : public BaseCreator
{
	GameObject* createGameObject() const
	{
		return new Player();
	}
};